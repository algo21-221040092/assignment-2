import backtrader as bt
import pandas as pd
import datetime as dt
import quantstats as qs
import pandas as pd
import talib


class UltimateOscillator(bt.Strategy):
    params =(
        ('period_1',7),
        ('period_2',14),
        ('period_1',28)
    )

    def log(self,txt,dt=None):
        df = dt or self.datas[0].datetime.date(0)
        print('%s , %s' % (dt.isoformat(),txt))

    def __init__(self):

        self.ULTOSC = bt.talib.ULTOSC(self.data.high,self.data.low,self.data.close,
                                    timeperiod1 =self.params.period_1,
                                    timeperiod2 =self.params.period_2,
                                    timeperiod3 =self.params.period_3)
    def notify_order(self,order):
        if order.status in [order.Submitted, order.Accepted]:
            return

        if order.status in [order.Completed]:
            if order.isbuy():
                self.log(
                    'BUY EXECUTED,Price:{:.2f},Cost :{:.2f},Comm{:.2f}'.format(
                        order.executed.price,
                        order.executed.value,
                        order.executed.comm
                    )
                )
                self.buyprice = order.executed.price 
                self.buycomm = order.executed.comm

            else:
                self.log(
                    'SELL EXECUTED, Price:{:.2f}, Cost:{:.2f},Comm:{:.2f}'.format(
                        order.executed.price,
                        order.executed.value,
                        order.executed.comm,
                    )
                )
                self.bar_executed=len(self)

        elif order.status in [order.Canceled, order.Margin, order.Rejected]:
            self.log('Order Canceled/Margin/Rejected')

        self.order =None

        def notify_trade(self,trade):
            if not trade.isclosed:
                return
            
            self.log('OPERATION PROFIT, GROSS{:.2f}, NET{:.2f}'.format(
                (trade.pnl,trade.pnlcomm)
            ))
                
        def next(self):
            if not self.position:
                if self.ULTOSC < 30:
                    self.buy()
            elif self.ULTOSC >70:
                self.close()


df=pd.read_csv(r'.\Backtrader学习\CSI300.csv')
df.index=pd.to_datetime(df.date)
df['openinterest']=0
data =bt.feeds.PandasData(dataname=df)
cerebro = bt.Cerebro()

cerebro.addstrategy(UltimateOscillator)
cerebro.adddata(data)

cerebro.broker.setcash(10000.0)
cerebro.broker.setcommission(commission = 0.001)
cerebro.broker = bt.brokers.BackBroker(slip_perc=0.005)
cerebro.addsizer(bt.sizers.PercentSizer,percents=10)
cerebro.addanalyzer(bt.analyzers.PyFolio,_name='PyFolio')


print('start portfolio value:',format(cerebro.broker.getvalue()))
results = cerebro.run()
print('end portfolio value:',format(cerebro.broker.getvalue()))


start = results[0]
portfolio_stats = start.analyzers.getbyname('PyFolio')
returns,positions,transactions,gross_lev = portfolio_stats.get_pf_items()
returns.index = returns.index.tz_convert(None)
#画图仍只能在notebook中输出
qs.reports.basic(returns,benchmark=None,rf=0.0,grayscale=False,display=True,compounded = True)


